

#include <cmath> //This inclusion allows the sin() function to work properly

// This #include statement was automatically added by the Particle IDE.
#include <neopixel.h>

// You should wire a momentary push button to connect from ground to a digital IO pin.
//This sketch is a modified buttoncycler sketch from the Adafruit libiary. As coded it will light up a strip of Neopixel
//leds as follows.
//Button press 1: All off
//Button press 2: All pixels light color
//Button press 3: All pixels light color
//Button press 4: All pixels light color
//Button press 5: All pixels light color

#define PIXEL_TYPE WS2812 //Defines LED type

#define BUTTON_PIN   D1    // Digital IO pin connected to the button.  This will be
                          // driven with a pull-up resistor so the switch should
                          // pull the pin to ground momentarily.  On a high -> low
                          // transition the button press logic will execute.

#define PIXEL_PIN    D6    // Digital IO pin connected to the NeoPixels.

#define PIXEL_COUNT 36

// Parameter 1 = number of pixels in strip,  neopixel stick has 8
// Parameter 2 = pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_RGB     Pixels are wired for RGB bitstream
//   NEO_GRB     Pixels are wired for GRB bitstream, correct for neopixel stick
//   NEO_KHZ400  400 KHz bitstream (e.g. FLORA pixels)
//   NEO_KHZ800  800 KHz bitstream (e.g. High Density LED strip), correct for neopixel stick



Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

bool oldState = HIGH;
int showType = 0;

///////////////////////////////////
// breathing pixel variables
unsigned long startTime = 0;
int colorR = 0, colorG = 0, colorB = 0;
int breathTime = 6000; // 6000ms = six seconds; adjust for your desired speed
float breathTimeFloat = breathTime;
float pi = 3.14;

// initialize the breath timer
void startBreath(int r, int g, int b){
  colorR = r;
  colorG = g;
  colorB = b;
  startTime = millis();
}


//////////////////////////////////////////////
void startSolid(int r, int g, int b){
        colorR = r;
        colorG = g;
        colorB = b;
}
///////////////////////////////////////////////////////////

void setup() {           // **********************this section runs one time at startup
pinMode(BUTTON_PIN, INPUT_PULLUP);
strip.begin();
strip.show(); // Initialize all pixels to 'off'
}



void loop() {
// Get current button state.
bool newState = digitalRead(BUTTON_PIN);

for (int i = 0; i < PIXEL_COUNT; i++) {
    strip.setPixelColor(i, 0);
}

// Check if state changed from high to low (button press).
if (newState == LOW && oldState == HIGH) {
// Short delay to debounce button.
delay(20);
// Check if button is still low after debounce.
newState = digitalRead(BUTTON_PIN);
if (newState == LOW) {
showType++;
if (showType > 6)//******************** controls amount of modes (case)If you add or subtract modes (case) this needs to reflect that.
showType=0;
startShow(showType);
}
}

 // Set the last button state to the old state.
oldState = newState;


///////////////////////////////
if (showType > 3)
updateSolid();
if (showType < 4)
updateBreath();
///////////////////////////


}



/////////////////////////////////////////////////////////////////

void updateBreath(){
  const float pi = 3.14;
  float frac; // ratio of color to use, based on time
  int r, g, b;

  // calculate a brightness fraction, based on a sine curve changing over time from 0 to 1 and back
  frac = (sin((((millis() - startTime) % breathTime)/breathTimeFloat - 0.25f) * 2.0f * pi) + 1.0f)/2.0f;

  // multiply each color by the brightness fraction
  r = colorR * frac;
  g = colorG * frac;
  b = colorB * frac;

  setPixelColor(strip.Color(r, g, b), 0);
}
/////////////////////////////////////////////////////////////////

void updateSolid(){
  int r, g, b;
  r = colorR;
  g = colorG;
  b = colorB;
  setPixelColor(strip.Color(r, g, b), 0);
}
///////////////////////////////////////////////////////////////////////////


void startShow(int i) {
switch(i){
case 0: startBreath(0,0,0); // OFF
    break;
case 1:  startBreath(255,255,255); // WHITE -- BREATH
  break;
case 2:  startBreath(0,155,0); // GREEN -- BREATH
  break;
case 3:  startBreath(155,155,0); // YELLOW -- BREATH
  break;
case 4: startSolid(255,255,255); // WHITE -- SOLID
  break;
case 5:  startSolid(0,255,0); // GREEN -- SOLID
  break;
case 6:  startSolid(155,155,0); // YELLOW -- SOLID
  break;






 }
}


//not used
void colorWipe(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}



void setPixelColor(uint32_t c, uint8_t wait) {
for(uint16_t i=0; i<strip.numPixels(); i++) { //  ******i=0 - 0 is the start pixel
strip.setPixelColor(i, c);       // *****change i to led\pixel number

//delay(wait);  // ************ removing eliminated the chase effect
  }
  strip.show();
}
